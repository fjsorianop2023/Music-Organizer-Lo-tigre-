import os
import json
import pygame
from mutagen.mp3 import MP3

pygame.mixer.init()

PLAYLIST_FILE = "playlists.json"

def scan_music_folder(folder_path):
    """Scans the specified folder for music files and retrieves metadata."""
    if not os.path.exists(folder_path):
        print("Folder not found!")
        return []
    
    music_files = []
    for file in os.listdir(folder_path):
        if file.endswith(('.mp3', '.wav')):
            try:
                audio = MP3(os.path.join(folder_path, file))
                duration = int(audio.info.length)
                music_files.append((file, duration))
            except Exception:
                music_files.append((file, "Unknown"))
    
    return music_files

def save_playlists(playlists):
with open(PLAYLIST_FILE, "w") as file:
        json.dump(playlists, file, indent=4)

def load_playlists():
    if os.path.exists(PLAYLIST_FILE):
        with open(PLAYLIST_FILE, "r") as file:
            return json.load(file)
    return {}
    

def play_song(file_path):
    pygame.mixer.music.load(file_path)
    pygame.mixer.music.play()
    print(f"Now playing: {os.path.basename(file_path)}")
    playback_controls()

def playback_controls():
    """Controls playback: pause, resume, and stop."""
    while True:
        command = input("Enter command (pause/resume/stop): ").strip().lower()
        if command == "pause":
            pygame.mixer.music.pause()
            print("Music paused. Type 'resume' to continue.")
        elif command == "resume":
            pygame.mixer.music.unpause()
            print("Resuming...")
        elif command == "stop":
            pygame.mixer.music.stop()
            print("Playback stopped.")
            return
        else:
            print("Invalid command. Use pause, resume, or stop.")

def play_playlist(playlist_name, playlists, folder_path):
    """Plays the songs in a selected playlist sequentially."""
    if playlist_name not in playlists:
        print("Playlist not found!")
        return
    
    playlist = playlists[playlist_name]
    if not playlist:
        print("Playlist is empty!")
        return
    
    for song in playlist:
        file_path = os.path.join(folder_path, song)
        if not os.path.exists(file_path):
            print(f"File not found: {song}")
            continue
        play_song(file_path)

def manage_playlists(playlists, music_files):
    """Manages playlists by allowing users to create, edit, and delete them."""
    while True:
        print("\nPlaylists:")
        for idx, name in enumerate(playlists.keys(), start=1):
            print(f"{idx}. {name}")
        print("Options: 1. Create 2. Edit 3. Delete 4. View Songs 5. Back")
        choice = input("Enter choice: ").strip()
        
        if choice == "1":
            name = input("Enter playlist name: ").strip()
            if name in playlists:
                print("Playlist already exists!")
            else:
                playlists[name] = []
                print("Playlist created.")
